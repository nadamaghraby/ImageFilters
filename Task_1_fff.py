# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'firstGUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from heapq import merge
from pickletools import uint8
from matplotlib import image
from pyqtgraph import PlotWidget
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QSlider
import cv2
import matplotlib.pyplot as plt
from cv2 import cv2
import numpy as np
from pathlib import Path
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1030, 634)
        
        MainWindow.setStyleSheet("")


        # MainWindow.setStyleSheet("background-color: black;")
        
 

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.widget = QtWidgets.QWidget(self.splitter)
        self.widget.setObjectName("widget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_6 = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_4.addWidget(self.label_6)

        self.comboBox = QtWidgets.QComboBox(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.comboBox.setFont(font)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout_4.addWidget(self.comboBox)
        
        self.comboBox.setStyleSheet("selection-background-color:#434545;")



        self.apply = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.apply.setFont(font)
        self.apply.setObjectName("apply")
        self.horizontalLayout_4.addWidget(self.apply)

        # self.apply.setStyleSheet("selection-background-color:#434545;")

        #########################slider

        self.label_f= QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_f.setFont(font)
        self.label_f.setObjectName("label_f")
        self.horizontalLayout_4.addWidget(self.label_f)

        self.intensity_control_slider = QtWidgets.QSlider(self.centralwidget)
        self.intensity_control_slider.setOrientation(QtCore.Qt.Horizontal)
        self.intensity_control_slider.setObjectName("horizontalSlider")
        self.horizontalLayout_4.addWidget(self.intensity_control_slider)

        self.intensity_control_slider.setFixedSize(150,30)

        self.intensity_control_slider.setMinimum(19)
        self.intensity_control_slider.setMaximum(49)
        self.intensity_control_slider.setValue(0)
        self.intensity_control_slider.setTickInterval(4)
        self.intensity_control_slider.setSingleStep(4)
        self.intensity_control_slider.setTickPosition(QSlider.TicksBelow)
        self.intensity_control_slider.valueChanged.connect(lambda: self.intensity_control())


        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem1)
        
        self.histogrm = QtWidgets.QPushButton(self.widget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.histogrm.setFont(font)
        self.histogrm.setObjectName("histogrm")
        self.horizontalLayout_4.addWidget(self.histogrm)
        

        #self.histogrm.setStyleSheet("selection-background-color:#434545;")

        self.verticalLayout_5.addLayout(self.horizontalLayout_4)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")

        self.verticalLayout_5.addLayout(self.horizontalLayout_2)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_2.addLayout(self.horizontalLayout)

        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        self.verticalLayout_5.addLayout(self.verticalLayout_3)
        self.layoutWidget = QtWidgets.QWidget(self.splitter)
        self.layoutWidget.setObjectName("layoutWidget")

        self.verticalLayout_6 = QtWidgets.QVBoxLayout()
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.verticalLayout_5.addLayout(self.verticalLayout_6)

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.verticalLayout_6.addLayout(self.horizontalLayout_3)

        self.frameA = QtWidgets.QFrame(self.centralwidget)
        self.horizontalLayout_2.addWidget(self.frameA)
        self.frameA.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameA.setFrameShadow(QtWidgets.QFrame.Raised)
        # self.LAYOUT_1 = QtWidgets.QGridLayout()
        # self.frameA.setLayout(self.LAYOUT_1)
        self.splitter_image = QtWidgets.QSplitter(self.centralwidget)
        self.horizontalLayout_2.addWidget(self.splitter_image)
        self.splitter_image.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_image.setObjectName("splitter_image")

        self.splitter_image.setStyleSheet("background-color:white; border-style: outset; border-width: 1px; border-color: black")

        self.splitter_1 = QtWidgets.QSplitter(self.centralwidget)
        self.horizontalLayout.addWidget(self.splitter_1)
        self.splitter_1.setOrientation(QtCore.Qt.Horizontal)


        self.splitter_1.setStyleSheet("background-color:white;border-style: outset; border-width: 1px; border-color: black")


        self.splitter_1.setObjectName("splitter_2")
        self.splitter_2 = QtWidgets.QSplitter(self.centralwidget)
        self.horizontalLayout.addWidget(self.splitter_2)
        self.splitter_2.setStyleSheet("background-color:white;border-style: outset; border-width: 1px; border-color: black")


        self.splitter_2.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_2.setObjectName("splitter_3")
        self.splitter_3 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_3.setStyleSheet("background-color:white; border-style: outset; border-width: 1px; border-color: black")

        self.horizontalLayout_3.addWidget(self.splitter_3)

        self.splitter_3.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_3.setObjectName("splitter_4")
        self.splitter_4 = QtWidgets.QSplitter(self.centralwidget)

        self.splitter_4.setStyleSheet("background-color:white; border-style: outset; border-width: 1px; border-color: black")

        self.horizontalLayout_3.addWidget(self.splitter_4)
        self.splitter_4.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_4.setObjectName("splitter_4")


        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")

        self.horizontalLayout_h = QtWidgets.QHBoxLayout()
        self.horizontalLayout_h.setObjectName("horizontalLayout_h")
        self.verticalLayout_4.addLayout(self.horizontalLayout_h)



        self.horizontalLayout_hist = QtWidgets.QHBoxLayout()
        self.horizontalLayout_hist.setObjectName("horizontalLayout_hist")
    
        
        ####################
        self.verticalLayout_4.addLayout(self.horizontalLayout_hist)
        self.frameHist = QtWidgets.QFrame(self.centralwidget)
        self.horizontalLayout_hist.addWidget(self.frameHist)
        self.frameHist.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameHist.setFrameShadow(QtWidgets.QFrame.Raised)
        self.LAYOUT_hist = QtWidgets.QGridLayout()

        # self.frameHist.setLayout(self.LAYOUT_hist)
        
        self.splitter_hist = QtWidgets.QSplitter(self.centralwidget)
        self.horizontalLayout_hist.addWidget(self.splitter_hist)
        self.splitter_hist.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_hist.setObjectName("splitter_hist")

        self.splitter_hist.setStyleSheet("background-color:white; border-style: outset; border-width: 1px; border-color: black")
        self.splitter_hist.setFixedSize(200,250)



        self.horizontalLayout_5.addWidget(self.splitter)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 1030, 26))
        self.menuBar.setObjectName("menuBar")
        self.menufile = QtWidgets.QMenu(self.menuBar)
        self.menufile.setObjectName("menufile")
        MainWindow.setMenuBar(self.menuBar)
        self.actionopen = QtWidgets.QAction(MainWindow)
        self.actionopen.setObjectName("actionopen")
        self.actionopen.triggered.connect(lambda: self.Open_file())
        self.menufile.addAction(self.actionopen)
        self.menuBar.addAction(self.menufile.menuAction())
        
        #######################################
        # self.centralwidget.setStyleSheet("background-color: qlineargradient(spread:reflect, x1:1, y1:1, x2:1, y2:0, stop:0 rgba(200, 200, 200, 255), stop:1 rgba(255, 255, 255, 255));border-color: rgb(0, 0, 0);")



        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.histogrm.clicked.connect(self.Histogrm)
        self.apply.clicked.connect(self.Apply)
        self.size=19

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label_6.setText(_translate("MainWindow", "Choose a filter"))
        self.comboBox.setItemText(0, _translate("MainWindow", "Low-Pass Filter"))
        self.comboBox.setItemText(1, _translate("MainWindow", "High-Pass Filter"))
        self.comboBox.setItemText(2, _translate("MainWindow", "Gaussian Blur Filter"))
        self.comboBox.setItemText(3, _translate("MainWindow", "Averaging Filter"))
        self.comboBox.setItemText(4, _translate("MainWindow", "High-Pass Filter Spatial"))
        self.comboBox.setItemText(5, _translate("MainWindow", "Low-Pass Filter Spatial"))
        self.apply.setText(_translate("MainWindow", "Apply"))
        self.histogrm.setText(_translate("MainWindow", "Histogram Equalization"))

        self.label_f.setText(_translate("MainWindow", "Filter Intensity"))
        
        self.menufile.setTitle(_translate("MainWindow", "Browse file"))
        self.actionopen.setText(_translate("MainWindow", "open"))

    def Open_file(self):
        if self.splitter_image.count() == 1:
            self.splitter_image.widget(0).deleteLater()
        self.fname ,_= QtWidgets.QFileDialog.getOpenFileName(None, 'Open png', QtCore.QDir.rootPath(), 'jpeg(*.jpeg)')
        open_image = cv2.imread(self.fname)
        image =  cv2.cvtColor(open_image, cv2.COLOR_BGR2RGB)

        self.Ofig, self.Oax = plt.subplots(figsize=(5, 5))
        self.Oax.set_title("Orginal Image")
        plt.imshow(image)
        Ofig = FigureCanvasQTAgg(self.Ofig)
        self.splitter_image.addWidget(Ofig)

    def Histogrm(self):
        if self.splitter_hist.count() == 1:
            self.splitter_hist.widget(0).deleteLater()
        image = cv2.imread(self.fname)
        s = image.shape
        image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        image_gray = cv2.convertScaleAbs(image_gray, alpha=1.1, beta=-20)

        def histogram(image):
            " function to draw histogram before making equalization "
            H = np.zeros(shape=(256, 1))
            s = image.shape
            for i in range(s[0]):
                for j in range(s[1]):
                    k = image[i, j]
                    H[k, 0] = H[k, 0]+1
            return H
        hist = histogram(image_gray)
        plt.plot(hist)
        self.fig, self.ax = plt.subplots(figsize=(5, 5))
        plt.plot(hist)
        # equalization
        x = hist.reshape(1, 256)
        y = np.array([])
        y = np.append(y, x[0, 0])
        for i in range(255):
            k = x[0, i+1]+y[i]
            y = np.append(y, k)
        y = np.round((y/(s[0]*s[1]))*(256-1))
        # to append new intensities
        for i in range(s[0]):
            for j in range(s[1]):
                k = image_gray[i, j]
                image_gray[i, j] = y[k]

        equalized = histogram(image_gray)
        plt.plot(equalized)
        fig = FigureCanvasQTAgg(self.fig)
        self.splitter_hist.addWidget(fig)

    def Apply(self):
        combo = self.comboBox.currentIndex()
        if self.splitter_1.count() == 1:
            self.splitter_1.widget(0).deleteLater()
        if self.splitter_2.count() == 1:
            self.splitter_2.widget(0).deleteLater()
        if self.splitter_3.count() == 1:
            self.splitter_3.widget(0).deleteLater()
        if self.splitter_4.count() == 1:
            self.splitter_4.widget(0).deleteLater()

        image = cv2.imread(self.fname,0)
        img = cv2.imread(self.fname)
        img_hsv= cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        image_hue,image_sat,image_val = cv2.split(img_hsv)
        plt.magnitude_spectrum, dft_shift = self.to_fourier(image_val)

        match combo:
            case 0:                
                blured_mask=self.creating_mask(image_val,1)
                image_after,fshift_mask_mag = self.applying_mask(dft_shift,blured_mask,image_hue,image_sat)
                
                self.fig_1_pre_filtered(image)
                self.fig_2_pre_filtered_fourier(image)
                self.fig_3_post_filter(image_after)
                self.fig_4_post_filter_fourier(fshift_mask_mag)

            case 1:                
                blured_mask = self.creating_mask(image,0)
                image_after,fshift_mask_mag = self.applying_mask(dft_shift,blured_mask,image_hue,image_sat)
                self.fig_1_pre_filtered(image)
                self.fig_2_pre_filtered_fourier(image)
                self.fig_3_post_filter(image_after)
                self.fig_4_post_filter_fourier(fshift_mask_mag)

            case 2:
                kernel_size= int(self.size)-16
                blur1 = cv2.GaussianBlur(image_val, (kernel_size, kernel_size), 0)
                blur_colored=self.remerging(image_hue,image_sat,blur1)
                self.fig_1_pre_filtered(image)
                self.fig_2_pre_filtered_fourier(image)
                self.fig_3_post_filter(blur_colored)
                plt.magnitude_spectrum, _ = self.to_fourier(blur1)
                self.fig_4_post_filter_fourier(plt.magnitude_spectrum)

            case 3:
                kernel_size= int(self.size)-16
                kernal1 = np.ones((kernel_size, kernel_size), np.float32)/10
                dst1 = cv2.filter2D(image, -1, kernal1)
                dst_colored=self.remerging(image_hue,image_sat,dst1)
                self.fig_1_pre_filtered(image)
                self.fig_2_pre_filtered_fourier(image)
                self.fig_3_post_filter(dst_colored)
                plt.magnitude_spectrum, _ = self.to_fourier(dst1)
                self.fig_4_post_filter_fourier(plt.magnitude_spectrum)

            case 4:
                kernel_size= int(self.size)-18
                
                dest = cv2.Laplacian(image, cv2.CV_16S, ksize=kernel_size)
                abs_dest = cv2.convertScaleAbs(dest)
                dst_image = self.remerging(image_hue,image_sat,abs_dest)
                self.fig_1_pre_filtered(dst_image)
                self.ax1.set_title("Filterd Image")

                

            case 5:
                kernel_size=int(self.size)-8
                blur = cv2.blur(image, (kernel_size,kernel_size))
                blured_image = self.remerging(image_hue,image_sat,blur)
                self.fig_1_pre_filtered(blured_image)
                self.ax1.set_title("Filterd Image")
                 
    def fig_1_pre_filtered(self,pre_filter):
        self.fig1, self.ax1 = plt.subplots(figsize=(5, 5))
        plt.imshow(pre_filter, cmap='gray')
        self.ax1.set_title("Gray-Scale Image")
        fig1 = FigureCanvasQTAgg(self.fig1)
        self.splitter_1.addWidget(fig1)

    def fig_2_pre_filtered_fourier(self,pre_filter):
        plt.magnitude_spectrum, dft_shift = self.to_fourier(pre_filter)
        self.fig2, self.ax2 = plt.subplots(figsize=(5, 5))
        plt.imshow(plt.magnitude_spectrum, cmap='gray')
        self.ax2.set_title("Frequency Domain of Original Image")
        fig2 = FigureCanvasQTAgg(self.fig2)
        self.splitter_2.addWidget(fig2)
    
    def fig_3_post_filter(self,post_filter_spatial):
        self.fig3, self.ax3 = plt.subplots(figsize=(5, 5))
        plt.imshow(post_filter_spatial, cmap='gray')
        self.ax3.set_title("Filtered Image")
        fig3 = FigureCanvasQTAgg(self.fig3)
        self.splitter_3.addWidget(fig3)
    
    def fig_4_post_filter_fourier(self,fshift_mask_mag):
        self.fig4, self.ax4 = plt.subplots(figsize=(5, 5))
        plt.imshow(fshift_mask_mag, cmap='gray')
        self.ax4.set_title("Filtered Fourier Domain")
        fig4 = FigureCanvasQTAgg(self.fig4)
        self.splitter_4.addWidget(fig4)


    def to_fourier(self, image):
        dft = cv2.dft(np.float32(image), flags=cv2.DFT_COMPLEX_OUTPUT)
        dft_shift = np.fft.fftshift(dft)
        plt.magnitude_spectrum = 20 *np.log(cv2.magnitude(dft_shift[:, :, 0], dft_shift[:, :, 1]))
        return plt.magnitude_spectrum, dft_shift

    def creating_mask(self,image, one_or_zero):
        rows, columns = image.shape
        center_rows, center_columns = int(rows/2), int(columns/2)
        if one_or_zero==1:
            mask = np.zeros((rows, columns, 2), np.uint8)
        else:
            mask = np.ones((rows, columns, 2), np.uint8)
            
        r = self.size
        center = [center_rows, center_columns]
        x, y = np.ogrid[:rows, :columns]
        mask_area = (x-center[0])**2 + (y-center[1])**2 <= r*r
        mask[mask_area] = one_or_zero
        blured_mask = cv2.GaussianBlur(mask, (33, 33), 0)
        return blured_mask

    def applying_mask(self,dft_shift, blured_mask,image_hue,image_sat):
        fshift = dft_shift * blured_mask
        fshift_mask_mag = 20 * np.log(cv2.magnitude(fshift[:, :, 0], fshift[:, :, 1])+1)
        f_ishift = np.fft.ifftshift(fshift)
        image_back = cv2.idft(f_ishift)
        image_back = cv2.magnitude(image_back[:, :, 0], image_back[:, :, 1])
        image_back= (image_back/ np.max(image_back)) *179
        image_after= self.remerging(image_hue,image_sat,image_back)

        return image_after, fshift_mask_mag
    
    def remerging(self,image_hue,image_sat,image_back):
        image_after=cv2.merge((image_hue.astype(np.uint8), image_sat.astype(np.uint8),image_back.astype(np.uint8)))
        image_after=cv2.cvtColor(image_after, cv2.COLOR_HSV2RGB)
        return image_after

    def intensity_control(self):
        value = float(self.intensity_control_slider.value())
        if value%2==0:
            self.size=value+1
        else:
            self.size= value
        self.Apply()

Global_Style="""QProgressBar:horizontal {
    border: 1px solid #3A3939;
    text-align: center;
    padding: 1px;
    background: #201F1F;
}
QProgressBar::chunk:horizontal {
    background-color: qlineargradient(spread:reflect, x1:1, y1:0.545, x2:1, y2:0, stop:0 rgba(28, 66, 111, 255), stop:1 rgba(37, 87, 146, 255));
}

QToolTip
{
    border: 1px solid #3A3939;
    background-color: rgb(90, 102, 117);;
    color: white;
    padding: 1px;
    opacity: 200;
}

QWidget
{
    color: silver;
    background-color: #302F2F;
    selection-background-color:#3d8ec9;
    selection-color: black;
    background-clip: border;
    border-image: none;
    outline: 0;
}

QWidget:item:hover
{
    background-color: #78879b;
    color: black;
}

QWidget:item:selected
{
    background-color: #3d8ec9;
}

QCheckBox
{
    spacing: 5px;
    outline: none;
    color: #bbb;
    margin-bottom: 2px;
}

QCheckBox:disabled
{
    color: #777777;
}
QCheckBox::indicator,
QGroupBox::indicator
{
    width: 18px;
    height: 18px;
}
QGroupBox::indicator
{
    margin-left: 2px;
}

QCheckBox::indicator:unchecked,
QCheckBox::indicator:unchecked:hover,
QGroupBox::indicator:unchecked,
QGroupBox::indicator:unchecked:hover
{
    image: url(:/dark_blue/img/checkbox_unchecked.png);
}

QCheckBox::indicator:unchecked:focus,
QCheckBox::indicator:unchecked:pressed,
QGroupBox::indicator:unchecked:focus,
QGroupBox::indicator:unchecked:pressed
{
  border: none;
    image: url(:/dark_blue/img/checkbox_unchecked_focus.png);
}

QCheckBox::indicator:checked,
QCheckBox::indicator:checked:hover,
QGroupBox::indicator:checked,
QGroupBox::indicator:checked:hover
{
    image: url(:/dark_blue/img/checkbox_checked.png);
}

QCheckBox::indicator:checked:focus,
QCheckBox::indicator:checked:pressed,
QGroupBox::indicator:checked:focus,
QGroupBox::indicator:checked:pressed
{
  border: none;
    image: url(:/dark_blue/img/checkbox_checked_focus.png);
}

QCheckBox::indicator:indeterminate,
QCheckBox::indicator:indeterminate:hover,
QCheckBox::indicator:indeterminate:pressed
QGroupBox::indicator:indeterminate,
QGroupBox::indicator:indeterminate:hover,
QGroupBox::indicator:indeterminate:pressed
{
    image: url(:/dark_blue/img/checkbox_indeterminate.png);
}

QCheckBox::indicator:indeterminate:focus,
QGroupBox::indicator:indeterminate:focus
{
    image: url(:/dark_blue/img/checkbox_indeterminate_focus.png);
}

QCheckBox::indicator:checked:disabled,
QGroupBox::indicator:checked:disabled
{
    image: url(:/dark_blue/img/checkbox_checked_disabled.png);
}

QCheckBox::indicator:unchecked:disabled,
QGroupBox::indicator:unchecked:disabled
{
    image: url(:/dark_blue/img/checkbox_unchecked_disabled.png);
}

QRadioButton
{
    spacing: 5px;
    outline: none;
    color: #bbb;
    margin-bottom: 2px;
}

QRadioButton:disabled
{
    color: #777777;
}
QRadioButton::indicator
{
    width: 21px;
    height: 21px;
}

QRadioButton::indicator:unchecked,
QRadioButton::indicator:unchecked:hover
{
    image: url(:/dark_blue/img/radio_unchecked.png);
}

QRadioButton::indicator:unchecked:focus,
QRadioButton::indicator:unchecked:pressed
{
  border: none;
  outline: none;
    image: url(:/dark_blue/img/radio_unchecked_focus.png);
}

QRadioButton::indicator:checked,
QRadioButton::indicator:checked:hover
{
  border: none;
  outline: none;
    image: url(:/dark_blue/img/radio_checked.png);
}

QRadioButton::indicator:checked:focus,
QRadioButton::indicato::menu-arrowr:checked:pressed
{
  border: none;
  outline: none;
    image: url(:/dark_blue/img/radio_checked_focus.png);
}

QRadioButton::indicator:indeterminate,
QRadioButton::indicator:indeterminate:hover,
QRadioButton::indicator:indeterminate:pressed
{
        image: url(:/dark_blue/img/radio_indeterminate.png);
}

QRadioButton::indicator:checked:disabled
{
  outline: none;
  image: url(:/dark_blue/img/radio_checked_disabled.png);
}

QRadioButton::indicator:unchecked:disabled
{
    image: url(:/dark_blue/img/radio_unchecked_disabled.png);
}


QMenuBar
{
    background-color: #302F2F;
    color: silver;
}

QMenuBar::item
{
    background: transparent;
}

QMenuBar::item:selected
{
    background: transparent;
    border: 1px solid #3A3939;
}

QMenuBar::item:pressed
{
    border: 1px solid #3A3939;
    background-color: #3d8ec9;
    color: black;
    margin-bottom:-1px;
    padding-bottom:1px;
}

QMenu
{
    border: 1px solid #3A3939;
    color: silver;
    margin: 1px;
}

QMenu::icon
{
    margin: 1px;
}

QMenu::item
{
    padding: 2px 2px 2px 25px;
    margin-left: 5px;
    border: 1px solid transparent; /* reserve space for selection border */
}

QMenu::item:selected
{
    color: black;
}

QMenu::separator {
    height: 2px;
    background: lightblue;
    margin-left: 10px;
    margin-right: 5px;
}

QMenu::indicator {
    width: 16px;
    height: 16px;
}

/* non-exclusive indicator = check box style indicator
   (see QActionGroup::setExclusive) */
QMenu::indicator:non-exclusive:unchecked {
    image: url(:/dark_blue/img/checkbox_unchecked.png);
}

QMenu::indicator:non-exclusive:unchecked:selected {
    image: url(:/dark_blue/img/checkbox_unchecked_disabled.png);
}

QMenu::indicator:non-exclusive:checked {
    image: url(:/dark_blue/img/checkbox_checked.png);
}

QMenu::indicator:non-exclusive:checked:selected {
    image: url(:/dark_blue/img/checkbox_checked_disabled.png);
}

/* exclusive indicator = radio button style indicator (see QActionGroup::setExclusive) */
QMenu::indicator:exclusive:unchecked {
    image: url(:/dark_blue/img/radio_unchecked.png);
}

QMenu::indicator:exclusive:unchecked:selected {
    image: url(:/dark_blue/img/radio_unchecked_disabled.png);
}

QMenu::indicator:exclusive:checked {
    image: url(:/dark_blue/img/radio_checked.png);
}

QMenu::indicator:exclusive:checked:selected {
    image: url(:/dark_blue/img/radio_checked_disabled.png);
}

QMenu::right-arrow {
    margin: 5px;
    image: url(:/dark_blue/img/right_arrow.png)
}


QWidget:disabled
{
    color: #808080;
    background-color: #302F2F;
}

QAbstractItemView
{
    alternate-background-color: #3A3939;
    color: silver;
    border: 1px solid 3A3939;
    border-radius: 2px;
    padding: 1px;
}

QWidget:focus, QMenuBar:focus
{
    border: 1px solid #78879b;
}

QTabWidget:focus, QCheckBox:focus, QRadioButton:focus, QSlider:focus
{
    border: none;
}

QLineEdit
{
    background-color: #201F1F;
    padding: 2px;
    border-style: solid;
    border: 1px solid #3A3939;
    border-radius: 2px;
    color: silver;
}

QGroupBox {
    border:1px solid #3A3939;
    border-radius: 2px;
    margin-top: 20px;
    background-color: #302F2F;
    color: silver;
}

QGroupBox::title {
    subcontrol-origin: margin;
    subcontrol-position: top center;
    padding-left: 10px;
    padding-right: 10px;
    padding-top: 10px;
}

QAbstractScrollArea
{
    border-radius: 2px;
    border: 1px solid #3A3939;
    background-color: transparent;
}

QScrollBar:horizontal
{
    height: 15px;
    margin: 3px 15px 3px 15px;
    border: 1px transparent #2A2929;
    border-radius: 4px;
    background-color: #2A2929;
}

QScrollBar::handle:horizontal
{
    background-color: #605F5F;
    min-width: 5px;
    border-radius: 4px;
}

QScrollBar::add-line:horizontal
{
    margin: 0px 3px 0px 3px;
    border-image: url(:/dark_blue/img/right_arrow_disabled.png);
    width: 10px;
    height: 10px;
    subcontrol-position: right;
    subcontrol-origin: margin;
}

QScrollBar::sub-line:horizontal
{
    margin: 0px 3px 0px 3px;
    border-image: url(:/dark_blue/img/left_arrow_disabled.png);
    height: 10px;
    width: 10px;
    subcontrol-position: left;
    subcontrol-origin: margin;
}

QScrollBar::add-line:horizontal:hover,QScrollBar::add-line:horizontal:on
{
    border-image: url(:/dark_blue/img/right_arrow.png);
    height: 10px;
    width: 10px;
    subcontrol-position: right;
    subcontrol-origin: margin;
}


QScrollBar::sub-line:horizontal:hover, QScrollBar::sub-line:horizontal:on
{
    border-image: url(:/dark_blue/img/left_arrow.png);
    height: 10px;
    width: 10px;
    subcontrol-position: left;
    subcontrol-origin: margin;
}

QScrollBar::up-arrow:horizontal, QScrollBar::down-arrow:horizontal
{
    background: none;
}


QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal
{
    background: none;
}

QScrollBar:vertical
{
    background-color: #2A2929;
    width: 15px;
    margin: 15px 3px 15px 3px;
    border: 1px transparent #2A2929;
    border-radius: 4px;
}

QScrollBar::handle:vertical
{
    background-color: #605F5F;
    min-height: 5px;
    border-radius: 4px;
}

QScrollBar::sub-line:vertical
{
    margin: 3px 0px 3px 0px;
    border-image: url(:/dark_blue/img/up_arrow_disabled.png);
    height: 10px;
    width: 10px;
    subcontrol-position: top;
    subcontrol-origin: margin;
}

QScrollBar::add-line:vertical
{
    margin: 3px 0px 3px 0px;
    border-image: url(:/dark_blue/img/down_arrow_disabled.png);
    height: 10px;
    width: 10px;
    subcontrol-position: bottom;
    subcontrol-origin: margin;
}

QScrollBar::sub-line:vertical:hover,QScrollBar::sub-line:vertical:on
{

    border-image: url(:/dark_blue/img/up_arrow.png);
    height: 10px;
    width: 10px;
    subcontrol-position: top;
    subcontrol-origin: margin;
}


QScrollBar::add-line:vertical:hover, QScrollBar::add-line:vertical:on
{
    border-image: url(:/dark_blue/img/down_arrow.png);
    height: 10px;
    width: 10px;
    subcontrol-position: bottom;
    subcontrol-origin: margin;
}

QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical
{
    background: none;
}


QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical
{
    background: none;
}

QTextEdit
{
    background-color: #201F1F;
    color: silver;
    border: 1px solid #3A3939;
}

QPlainTextEdit
{
    background-color: #201F1F;;
    color: silver;
    border-radius: 2px;
    border: 1px solid #3A3939;
}

QHeaderView::section
{
    background-color: #3A3939;
    color: silver;
    padding-left: 4px;
    border: 1px solid #6c6c6c;
}

QSizeGrip {
    image: url(:/dark_blue/img/sizegrip.png);
    width: 12px;
    height: 12px;
}

QMainWindow
{
    background-color: #302F2F;

}

QMainWindow::separator
{
    background-color: #302F2F;
    color: white;
    padding-left: 4px;
    spacing: 2px;
    border: 1px dashed #3A3939;
}

QMainWindow::separator:hover
{

    background-color: #787876;
    color: white;
    padding-left: 4px;
    border: 1px solid #3A3939;
    spacing: 2px;
}


QMenu::separator
{
    height: 1px;
    background-color: #3A3939;
    color: white;
    padding-left: 4px;
    margin-left: 10px;
    margin-right: 5px;
}


QFrame
{
    border-radius: 2px;
    border: 1px solid #444;
}

QFrame[frameShape="0"]
{
    border-radius: 2px;
    border: 1px transparent #444;
}

QStackedWidget
{
    background-color: #302F2F;
    border: 1px transparent black;
}

QToolBar {
    border: 1px transparent #393838;
    background: 1px solid #302F2F;
    font-weight: bold;
}

QToolBar::handle:horizontal {
    image: url(:/dark_blue/img/Hmovetoolbar.png);
}
QToolBar::handle:vertical {
    image: url(:/dark_blue/img/Vmovetoolbar.png);
}
QToolBar::separator:horizontal {
    image: url(:/dark_blue/img/Hsepartoolbar.png);
}
QToolBar::separator:vertical {
    image: url(:/dark_blue/img/Vsepartoolbars.png);
}

QPushButton
{
    color: silver;
    background-color: #302F2F;
    border-width: 2px;
    border-color: #4A4949;
    border-style: solid;
    padding-top: 2px;
    padding-bottom: 2px;
    padding-left: 10px;
    padding-right: 10px;
    border-radius: 4px;
    /* outline: none; */
    /* min-width: 40px; */
}

QPushButton:disabled
{
    background-color: #302F2F;
    border-width: 2px;
    border-color: #3A3939;
    border-style: solid;
    padding-top: 2px;
    padding-bottom: 2px;
    padding-left: 10px;
    padding-right: 10px;
    /*border-radius: 2px;*/
    color: #808080;
}

QPushButton:focus {
    background-color: #3d8ec9;
    color: white;
}

QComboBox
{
    selection-background-color: #434545;
    background-color: #201F1F;
    border-style: solid;
    border: 1px solid #3A3939;
    border-radius: 2px;
    padding: 2px;
    min-width: 75px;
}

QPushButton:checked{
    background-color: #4A4949;
    border-color: #6A6969;
}

QPushButton:hover {
    border: 2px solid #78879b;
    color: silver;
}

QComboBox:hover, QAbstractSpinBox:hover,QLineEdit:hover,QTextEdit:hover,QPlainTextEdit:hover,QAbstractView:hover,QTreeView:hover
{
    border: 1px solid #78879b;
    color: silver;
}

QComboBox:on
{
    background-color: #626873;
    padding-top: 3px;
    padding-left: 4px;
    selection-background-color: #4a4a4a;
}

QComboBox QAbstractItemView
{
    background-color: #201F1F;
    border-radius: 2px;
    border: 1px solid #444;
    selection-background-color: #3d8ec9;
    color: silver;
}

QComboBox::drop-down
{
    subcontrol-origin: padding;
    subcontrol-position: top right;
    width: 15px;

    border-left-width: 0px;
    border-left-color: darkgray;
    border-left-style: solid;
    border-top-right-radius: 3px;
    border-bottom-right-radius: 3px;
}

QComboBox::down-arrow
{
    image: url(:/dark_blue/img/down_arrow_disabled.png);
}

QComboBox::down-arrow:on, QComboBox::down-arrow:hover,
QComboBox::down-arrow:focus
{
    image: url(:/dark_blue/img/down_arrow.png);
}

QPushButton:pressed
{
    background-color: #484846;
}

QAbstractSpinBox {
    padding-top: 2px;
    padding-bottom: 2px;
    border: 1px solid #3A3939;
    background-color: #201F1F;
    color: silver;
    border-radius: 2px;
    min-width: 75px;
}

QAbstractSpinBox:up-button
{
    background-color: transparent;
    subcontrol-origin: border;
    subcontrol-position: top right;
}

QAbstractSpinBox:down-button
{
    background-color: transparent;
    subcontrol-origin: border;
    subcontrol-position: bottom right;
}

QAbstractSpinBox::up-arrow,QAbstractSpinBox::up-arrow:disabled,QAbstractSpinBox::up-arrow:off {
    image: url(:/dark_blue/img/up_arrow_disabled.png);
    width: 10px;
    height: 10px;
}
QAbstractSpinBox::up-arrow:hover
{
    image: url(:/dark_blue/img/up_arrow.png);
}


QAbstractSpinBox::down-arrow,QAbstractSpinBox::down-arrow:disabled,QAbstractSpinBox::down-arrow:off
{
    image: url(:/dark_blue/img/down_arrow_disabled.png);
    width: 10px;
    height: 10px;
}
QAbstractSpinBox::down-arrow:hover
{
    image: url(:/dark_blue/img/down_arrow.png);
}


QLabel
{
    border: 0px solid black;
}

QTabWidget{
    border: 1px transparent black;
}

QTabWidget::pane {
    border: 1px solid #444;
    border-radius: 3px;
    padding: 3px;
}

QTabBar
{
    qproperty-drawBase: 0;
    left: 5px; /* move to the right by 5px */
}

QTabBar:focus
{
    border: 0px transparent black;
}

QTabBar::close-button  {
    image: url(:/dark_blue/img/close.png);
    background: transparent;
}

QTabBar::close-button:hover
{
    image: url(:/dark_blue/img/close-hover.png);
    background: transparent;
}

QTabBar::close-button:pressed {
    image: url(:/dark_blue/img/close-pressed.png);
    background: transparent;
}

/* TOP TABS */
QTabBar::tab:top {
    color: #b1b1b1;
    border: 1px solid #4A4949;
    border-bottom: 1px transparent black;
    background-color: #302F2F;
    padding: 5px;
    border-top-left-radius: 2px;
    border-top-right-radius: 2px;
}

QTabBar::tab:top:!selected
{
    color: #b1b1b1;
    background-color: #201F1F;
    border: 1px transparent #4A4949;
    border-bottom: 1px transparent #4A4949;
    border-top-left-radius: 0px;
    border-top-right-radius: 0px;
}

QTabBar::tab:top:!selected:hover {
    background-color: #48576b;
}

/* BOTTOM TABS */
QTabBar::tab:bottom {
    color: #b1b1b1;
    border: 1px solid #4A4949;
    border-top: 1px transparent black;
    background-color: #302F2F;
    padding: 5px;
    border-bottom-left-radius: 2px;
    border-bottom-right-radius: 2px;
}

QTabBar::tab:bottom:!selected
{
    color: #b1b1b1;
    background-color: #201F1F;
    border: 1px transparent #4A4949;
    border-top: 1px transparent #4A4949;
    border-bottom-left-radius: 0px;
    border-bottom-right-radius: 0px;
}

QTabBar::tab:bottom:!selected:hover {
    background-color: #78879b;
}

/* LEFT TABS */
QTabBar::tab:left {
    color: #b1b1b1;
    border: 1px solid #4A4949;
    border-left: 1px transparent black;
    background-color: #302F2F;
    padding: 5px;
    border-top-right-radius: 2px;
    border-bottom-right-radius: 2px;
}

QTabBar::tab:left:!selected
{
    color: #b1b1b1;
    background-color: #201F1F;
    border: 1px transparent #4A4949;
    border-right: 1px transparent #4A4949;
    border-top-right-radius: 0px;
    border-bottom-right-radius: 0px;
}

QTabBar::tab:left:!selected:hover {
    background-color: #48576b;
}


/* RIGHT TABS */
QTabBar::tab:right {
    color: #b1b1b1;
    border: 1px solid #4A4949;
    border-right: 1px transparent black;
    background-color: #302F2F;
    padding: 5px;
    border-top-left-radius: 2px;
    border-bottom-left-radius: 2px;
}

QTabBar::tab:right:!selected
{
    color: #b1b1b1;
    background-color: #201F1F;
    border: 1px transparent #4A4949;
    border-right: 1px transparent #4A4949;
    border-top-left-radius: 0px;
    border-bottom-left-radius: 0px;
}

QTabBar::tab:right:!selected:hover {
    background-color: #48576b;
}

QTabBar QToolButton::right-arrow:enabled {
     image: url(:/dark_blue/img/right_arrow.png);
 }

 QTabBar QToolButton::left-arrow:enabled {
     image: url(:/dark_blue/img/left_arrow.png);
 }

QTabBar QToolButton::right-arrow:disabled {
     image: url(:/dark_blue/img/right_arrow_disabled.png);
 }

 QTabBar QToolButton::left-arrow:disabled {
     image: url(:/dark_blue/img/left_arrow_disabled.png);
 }


QDockWidget {
    border: 1px solid #403F3F;
    titlebar-close-icon: url(:/dark_blue/img/close.png);
    titlebar-normal-icon: url(:/dark_blue/img/undock.png);
}

QDockWidget::close-button, QDockWidget::float-button {
    border: 1px solid transparent;
    border-radius: 2px;
    background: transparent;
}

QDockWidget::close-button:hover, QDockWidget::float-button:hover {
    background: rgba(255, 255, 255, 10);
}

QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
    padding: 1px -1px -1px 1px;
    background: rgba(255, 255, 255, 10);
}

QTreeView, QListView, QTextBrowser, AtLineEdit, AtLineEdit::hover {
    border: 1px solid #444;
    background-color: silver;
    border-radius: 3px;
    margin-left: 3px;
    color: black;
}

QTreeView:branch:selected, QTreeView:branch:hover {
    background: url(:/dark_blue/img/transparent.png);
}

QTreeView::branch:has-siblings:!adjoins-item {
    border-image: url(:/dark_blue/img/transparent.png);
}

QTreeView::branch:has-siblings:adjoins-item {
    border-image: url(:/dark_blue/img/transparent.png);
}

QTreeView::branch:!has-children:!has-siblings:adjoins-item {
    border-image: url(:/dark_blue/img/transparent.png);
}

QTreeView::branch:has-children:!has-siblings:closed,
QTreeView::branch:closed:has-children:has-siblings {
    image: url(:/dark_blue/img/branch_closed.png);
}

QTreeView::branch:open:has-children:!has-siblings,
QTreeView::branch:open:has-children:has-siblings  {
    image: url(:/dark_blue/img/branch_open.png);
}

QTreeView::branch:has-children:!has-siblings:closed:hover,
QTreeView::branch:closed:has-children:has-siblings:hover {
    image: url(:/dark_blue/img/branch_closed-on.png);
    }

QTreeView::branch:open:has-children:!has-siblings:hover,
QTreeView::branch:open:has-children:has-siblings:hover  {
    image: url(:/dark_blue/img/branch_open-on.png);
    }

QListView::item:!selected:hover, QListView::item:!selected:hover, QTreeView::item:!selected:hover  {
    background: rgba(0, 0, 0, 0);
    outline: 0;
    color: #FFFFFF
}

QListView::item:selected:hover, QListView::item:selected:hover, QTreeView::item:selected:hover  {
    background: #3d8ec9;
    color: #FFFFFF;
}

QSlider::groove:horizontal {
    border: 1px solid #3A3939;
    height: 8px;
    background: #201F1F;
    margin: 2px 0;
    border-radius: 2px;
}

QSlider::handle:horizontal {
    background: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1,
      stop: 0.0 silver, stop: 0.2 #a8a8a8, stop: 1 #727272);
    border: 1px solid #3A3939;
    width: 14px;
    height: 14px;
    margin: -4px 0;
    border-radius: 2px;
}

QSlider::groove:vertical {
    border: 1px solid #3A3939;
    width: 8px;
    background: #201F1F;
    margin: 0 0px;
    border-radius: 2px;
}

QSlider::handle:vertical {
    background: QLinearGradient( x1: 0, y1: 0, x2: 0, y2: 1, stop: 0.0 silver,
    stop: 0.2 #a8a8a8, stop: 1 #727272);
    border: 1px solid #3A3939;
    width: 14px;
    height: 14px;
    margin: 0 -4px;
    border-radius: 2px;
}

QToolButton {
    /*  background-color: transparent; */
    border: 2px transparent #4A4949;
    border-radius: 4px;
    background-color: dimgray;
    margin: 2px;
    padding: 2px;
}

QToolButton[popupMode="1"] { /* only for MenuButtonPopup */
 padding-right: 20px; /* make way for the popup button */
 border: 2px transparent #4A4949;
 border-radius: 4px;
}

QToolButton[popupMode="2"] { /* only for InstantPopup */
 padding-right: 10px; /* make way for the popup button */
 border: 2px transparent #4A4949;
}


QToolButton:hover, QToolButton::menu-button:hover {
    border: 2px solid #78879b;
}

QToolButton:checked, QToolButton:pressed,
    QToolButton::menu-button:pressed {
    background-color: #4A4949;
    border: 2px solid #78879b;
}

/* the subcontrol below is used only in the InstantPopup or DelayedPopup mode */
QToolButton::menu-indicator {
    image: url(:/dark_blue/img/down_arrow.png);
    top: -7px; left: -2px; /* shift it a bit */
}

/* the subcontrols below are used only in the MenuButtonPopup mode */
QToolButton::menu-button {
    border: 1px transparent #4A4949;
    border-top-right-radius: 6px;
    border-bottom-right-radius: 6px;
    /* 16px width + 4px for border = 20px allocated above */
    width: 16px;
    outline: none;
}

QToolButton::menu-arrow {
    image: url(:/dark_blue/img/down_arrow.png);
}

QToolButton::menu-arrow:open {
    top: 1px; left: 1px; /* shift it a bit */
    border: 1px solid #3A3939;
}

QPushButton::menu-indicator  {
    subcontrol-origin: padding;
    subcontrol-position: bottom right;
    left: 4px;
}

QTableView
{
    border: 1px solid #444;
    gridline-color: #6c6c6c;
    background-color: #201F1F;
}


QTableView, QHeaderView
{
    border-radius: 0px;
}

QTableView::item:pressed, QListView::item:pressed, QTreeView::item:pressed  {
    background: #78879b;
    color: #FFFFFF;
}

QTableView::item:selected:active, QTreeView::item:selected:active, QListView::item:selected:active  {
    background: #3d8ec9;
    color: #FFFFFF;
}


QHeaderView
{
    border: 1px transparent;
    border-radius: 2px;
    margin: 0px;
    padding: 0px;
}

QHeaderView::section  {
    background-color: #3A3939;
    color: silver;
    padding: 4px;
    border: 1px solid #6c6c6c;
    border-radius: 0px;
    text-align: center;
}

QHeaderView::section::vertical::first, QHeaderView::section::vertical::only-one
{
    border-top: 1px solid #6c6c6c;
}

QHeaderView::section::vertical
{
    border-top: transparent;
}

QHeaderView::section::horizontal::first, QHeaderView::section::horizontal::only-one
{
    border-left: 1px solid #6c6c6c;
}

QHeaderView::section::horizontal
{
    border-left: transparent;
}


QHeaderView::section:checked
 {
    color: white;
    background-color: #5A5959;
 }

 /* style the sort indicator */
QHeaderView::down-arrow {
    image: url(:/dark_blue/img/down_arrow.png);
}

QHeaderView::up-arrow {
    image: url(:/dark_blue/img/up_arrow.png);
}


QTableCornerButton::section {
    background-color: #3A3939;
    border: 1px solid #3A3939;
    border-radius: 2px;
}

QToolBox  {
    padding: 3px;
    border: 1px transparent black;
}

QToolBox::tab {
    color: #b1b1b1;
    background-color: #302F2F;
    border: 1px solid #4A4949;
    border-bottom: 1px transparent #302F2F;
    border-top-left-radius: 5px;
    border-top-right-radius: 5px;
}

 QToolBox::tab:selected { /* italicize selected tabs */
    font: italic;
    background-color: #302F2F;
    border-color: #3d8ec9;
 }

QStatusBar::item {
    border: 1px solid #3A3939;
    border-radius: 2px;
 }


QFrame[height="3"], QFrame[width="3"] {
    background-color: #AAA;
}


QSplitter::handle {
    border: 1px dashed #3A3939;
}

QSplitter::handle:hover {
    background-color: #787876;
    border: 1px solid #3A3939;
}

QSplitter::handle:horizontal {
    width: 1px;
}

QSplitter::handle:vertical {
    height: 1px;
}

QListWidget {
    background-color: silver;
    border-radius: 5px;
    margin-left: 5px;
}

QListWidget::item {
    color: black;
}

QMessageBox {
    messagebox-critical-icon	: url(:/dark_blue/img/critical.png);
    messagebox-information-icon	: url(:/dark_blue/img/information.png);
    messagebox-question-icon	: url(:/dark_blue/img/question.png);
    messagebox-warning-icon:    : url(:/dark_blue/img/warning.png);
}

ColorButton::enabled {
    border-radius: 0px;
    border: 1px solid #444444;
}

ColorButton::disabled {
    border-radius: 0px;
    border: 1px solid #AAAAAA;
}

"""

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setStyleSheet(Global_Style)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
